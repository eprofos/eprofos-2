{% extends 'student/base.html.twig' %}

{% block title %}{{ page_title }} - {{ parent() }}{% endblock %}

{% block page_actions %}
    <div class="btn-list">
        <div class="dropdown">
            <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <svg xmlns="http://www.w3.org/2000/svg" class="icon me-1" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                    <path d="M5.5 5.5a2.5 2.5 0 0 1 2.5 -2.5h8a2.5 2.5 0 0 1 2.5 2.5v15l-5 -3l-5 3v-15z"/>
                </svg>
                Filtrer
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="?filter=all">Toutes les notifications</a></li>
                <li><a class="dropdown-item" href="?filter=unread">Non lues uniquement</a></li>
                <li><a class="dropdown-item" href="?filter=courses">Formations</a></li>
                <li><a class="dropdown-item" href="?filter=system">Système</a></li>
                <li><a class="dropdown-item" href="?filter=messages">Messages</a></li>
            </ul>
        </div>
        <a href="#" class="btn btn-primary" onclick="markAllAsRead()">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon me-1" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                <path d="M5 12l5 5l10 -10"/>
            </svg>
            Tout marquer comme lu
        </a>
        <a href="{{ path('student_dashboard') }}" class="btn btn-outline-secondary">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon me-1" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                <path d="M9 14l-4 -4l4 -4"/>
                <path d="M5 10h11a4 4 0 1 1 0 8h-1"/>
            </svg>
            Retour au tableau de bord
        </a>
    </div>
{% endblock %}

{% block body %}
    <div class="row row-deck row-cards">
        <!-- Notifications Overview -->
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col">
                            <h3 class="card-title">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon me-2" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                    <path d="M10 5a2 2 0 1 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6"/>
                                    <path d="M9 17v1a3 3 0 0 0 6 0v-1"/>
                                </svg>
                                Centre de notifications
                            </h3>
                            <div class="card-subtitle">
                                {% set unread_count = unread_notifications|length %}
                                {% if unread_count > 0 %}
                                    <span class="badge bg-red">{{ unread_count }}</span> notification{{ unread_count > 1 ? 's' : '' }} non lue{{ unread_count > 1 ? 's' : '' }}
                                {% else %}
                                    Toutes vos notifications sont à jour
                                {% endif %}
                            </div>
                        </div>
                        <div class="col-auto">
                            <div class="btn-list">
                                <span class="badge bg-primary">{{ all_notifications|length }} au total</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    {% if all_notifications is not empty %}
                        <div class="list-group list-group-flush">
                            <!-- Unread Notifications First -->
                            {% if unread_notifications is not empty %}
                                {% for notification in unread_notifications %}
                                    <div class="list-group-item notification-item unread" data-notification-id="{{ notification.id ?? 'notification-' ~ loop.index }}">
                                        <div class="row align-items-start">
                                            <div class="col-auto">
                                                <span class="avatar avatar-sm bg-{{ notification.type == 'success' ? 'success' : (notification.type == 'warning' ? 'warning' : (notification.type == 'error' ? 'danger' : 'primary')) }}">
                                                    {% if notification.type == 'success' %}
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                                            <path d="M5 12l5 5l10 -10"/>
                                                        </svg>
                                                    {% elseif notification.type == 'warning' %}
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                                            <path d="M12 9v2m0 4v.01"/>
                                                            <path d="M5 19h14a2 2 0 0 0 1.84 -2.75l-7.1 -12.25a2 2 0 0 0 -3.5 0l-7.1 12.25a2 2 0 0 0 1.75 2.75"/>
                                                        </svg>
                                                    {% elseif notification.type == 'error' %}
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                                            <circle cx="12" cy="12" r="9"/>
                                                            <line x1="12" y1="8" x2="12" y2="12"/>
                                                            <line x1="12" y1="16" x2="12.01" y2="16"/>
                                                        </svg>
                                                    {% else %}
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                                            <circle cx="12" cy="12" r="9"/>
                                                            <path d="M12 8h.01"/>
                                                            <path d="M11 12h1v4h1"/>
                                                        </svg>
                                                    {% endif %}
                                                </span>
                                            </div>
                                            <div class="col">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div>
                                                        <h4 class="mb-1">{{ notification.title ?? 'Nouvelle notification' }}</h4>
                                                        <div class="text-muted mb-2">{{ notification.message ?? 'Vous avez une nouvelle notification.' }}</div>
                                                        <div class="text-muted small">
                                                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-sm me-1" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                                <circle cx="12" cy="12" r="9"/>
                                                                <polyline points="12,6 12,12 16,14"/>
                                                            </svg>
                                                            {{ notification.created_at|date('d/m/Y H:i') ?? 'now'|date('d/m/Y H:i') }}
                                                        </div>
                                                    </div>
                                                    <div class="d-flex align-items-center">
                                                        <span class="badge bg-red me-2">Nouveau</span>
                                                        <div class="btn-list">
                                                            {% if notification.action_url is defined %}
                                                                <a href="{{ notification.action_url }}" class="btn btn-sm btn-outline-primary">{{ notification.action_text ?? 'Voir' }}</a>
                                                            {% endif %}
                                                            <button type="button" class="btn btn-sm btn-ghost-secondary" onclick="markAsRead(this, '{{ notification.id ?? '' }}')">
                                                                <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-sm" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                                                    <path d="M5 12l5 5l10 -10"/>
                                                                </svg>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                {% endfor %}
                                
                                <!-- Separator if there are read notifications -->
                                {% if all_notifications|length > unread_notifications|length %}
                                    <div class="list-group-item bg-light">
                                        <div class="text-center text-muted small py-2">
                                            <strong>Notifications lues</strong>
                                        </div>
                                    </div>
                                {% endif %}
                            {% endif %}

                            <!-- Read Notifications -->
                            {% for notification in all_notifications %}
                                {% if notification.is_read is defined and notification.is_read %}
                                    <div class="list-group-item notification-item read" data-notification-id="{{ notification.id ?? 'read-notification-' ~ loop.index }}">
                                        <div class="row align-items-start">
                                            <div class="col-auto">
                                                <span class="avatar avatar-sm bg-secondary text-white">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                                        <path d="M5 12l5 5l10 -10"/>
                                                    </svg>
                                                </span>
                                            </div>
                                            <div class="col">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div>
                                                        <h4 class="mb-1 text-muted">{{ notification.title ?? 'Notification lue' }}</h4>
                                                        <div class="text-muted mb-2 small">{{ notification.message ?? 'Cette notification a été lue.' }}</div>
                                                        <div class="text-muted small">
                                                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-sm me-1" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                                <circle cx="12" cy="12" r="9"/>
                                                                <polyline points="12,6 12,12 16,14"/>
                                                            </svg>
                                                            {{ notification.created_at|date('d/m/Y H:i') ?? 'now'|date('d/m/Y H:i') }}
                                                        </div>
                                                    </div>
                                                    {% if notification.action_url is defined %}
                                                        <div class="btn-list">
                                                            <a href="{{ notification.action_url }}" class="btn btn-sm btn-outline-secondary">{{ notification.action_text ?? 'Voir' }}</a>
                                                        </div>
                                                    {% endif %}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                {% endif %}
                            {% endfor %}
                        </div>

                        <!-- Load More Button -->
                        {% if all_notifications|length >= 20 %}
                            <div class="card-footer text-center">
                                <button type="button" class="btn btn-outline-primary" onclick="loadMoreNotifications()">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon me-1" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <path d="M12 5v14"/>
                                        <path d="M5 12l7 7l7 -7"/>
                                    </svg>
                                    Charger plus de notifications
                                </button>
                            </div>
                        {% endif %}
                    {% else %}
                        <!-- Empty State -->
                        <div class="empty">
                            <div class="empty-img">
                                <img src="{{ asset('images/undraw_empty.svg') }}" height="128" alt="Aucune notification" onerror="this.style.display='none'">
                            </div>
                            <p class="empty-title">Aucune notification</p>
                            <p class="empty-subtitle text-muted">
                                Vous recevrez ici toutes vos notifications importantes concernant vos formations, 
                                vos progressions et les mises à jour système.
                            </p>
                            <div class="empty-action">
                                <a href="{{ path('student_courses') }}" class="btn btn-primary">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon me-1" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <path d="M6 4h10l4 4v10a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2"/>
                                        <circle cx="12" cy="14" r="2"/>
                                        <path d="M14 4l0 4l-6 0l0 -4"/>
                                    </svg>
                                    Découvrir mes formations
                                </a>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    {% if unread_notifications is not empty %}
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon me-2" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <path d="M12 3l8 4.5v9l-8 4.5l-8 -4.5v-9l8 -4.5"/>
                                <path d="M12 12l8 -4.5"/>
                                <path d="M12 12v9"/>
                                <path d="M12 12l-8 -4.5"/>
                            </svg>
                            Actions rapides
                        </h4>
                        <div class="btn-list">
                            <button type="button" class="btn btn-outline-primary" onclick="markAllAsRead()">
                                Marquer tout comme lu
                            </button>
                            <button type="button" class="btn btn-outline-secondary" onclick="refreshNotifications()">
                                Actualiser
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon me-2" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37a1.724 1.724 0 0 0 2.572 -1.065z"/>
                                <circle cx="12" cy="12" r="3"/>
                            </svg>
                            Paramètres
                        </h4>
                        <p class="text-muted">Gérez vos préférences de notifications.</p>
                        <a href="{{ path('student_settings') }}" class="btn btn-outline-primary">
                            Configurer les notifications
                        </a>
                    </div>
                </div>
            </div>
        </div>
    {% endif %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function markAsRead(button, notificationId = null) {
            if (notificationId) {
                // Mark single notification as read
                const notificationItem = button.closest('.notification-item');
                if (notificationItem) {
                    notificationItem.classList.remove('unread');
                    notificationItem.classList.add('read');
                    
                    // Update UI elements
                    const badge = notificationItem.querySelector('.badge.bg-red');
                    if (badge) {
                        badge.remove();
                    }
                    
                    const avatar = notificationItem.querySelector('.avatar');
                    if (avatar) {
                        avatar.className = 'avatar avatar-sm bg-secondary text-white';
                    }
                    
                    // Update title color
                    const title = notificationItem.querySelector('h4');
                    if (title) {
                        title.classList.add('text-muted');
                    }
                    
                    // Hide the mark as read button
                    button.style.display = 'none';
                    
                    // Show success message
                    showMessage('Notification marquée comme lue', 'success');
                }
            }
        }
        
        function markAllAsRead() {
            const unreadNotifications = document.querySelectorAll('.notification-item.unread');
            
            unreadNotifications.forEach(notification => {
                notification.classList.remove('unread');
                notification.classList.add('read');
                
                // Update UI elements
                const badge = notification.querySelector('.badge.bg-red');
                if (badge) {
                    badge.remove();
                }
                
                const avatar = notification.querySelector('.avatar');
                if (avatar) {
                    avatar.className = 'avatar avatar-sm bg-secondary text-white';
                }
                
                const title = notification.querySelector('h4');
                if (title) {
                    title.classList.add('text-muted');
                }
                
                const markButton = notification.querySelector('button[onclick*="markAsRead"]');
                if (markButton) {
                    markButton.style.display = 'none';
                }
            });
            
            // Update header subtitle
            const subtitle = document.querySelector('.card-subtitle');
            if (subtitle) {
                subtitle.innerHTML = 'Toutes vos notifications sont à jour';
            }
            
            showMessage('Toutes les notifications ont été marquées comme lues', 'success');
        }
        
        function refreshNotifications() {
            showMessage('Actualisation des notifications...', 'info');
            // In a real implementation, this would make an AJAX call to refresh notifications
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
        
        function loadMoreNotifications() {
            showMessage('Chargement de plus de notifications...', 'info');
            // In a real implementation, this would make an AJAX call to load more notifications
        }
        
        function showMessage(message, type = 'info') {
            // Create a toast notification
            const toast = document.createElement('div');
            toast.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(toast);
            
            // Auto-remove after 3 seconds
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 3000);
        }
        
        // Add CSS for unread notifications
        const style = document.createElement('style');
        style.textContent = `
            .notification-item.unread {
                background-color: #f8f9fa;
                border-left: 4px solid #007bff;
            }
            .notification-item.read {
                opacity: 0.7;
            }
        `;
        document.head.appendChild(style);
    </script>
{% endblock %}
