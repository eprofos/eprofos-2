{% extends 'admin/base.html.twig' %}

{% set page_title = 'Importer un modèle UI' %}
{% set breadcrumb = [
    {'label': 'Documents', 'url': path('admin_document_index')},
    {'label': 'Modèles UI', 'url': path('admin_document_ui_template_index')},
    {'label': 'Importer'}
] %}

{% block body %}
<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">
                        <i class="fas fa-upload me-2"></i>
                        {{ page_title }}
                    </h4>
                    <div class="text-muted small mt-1">
                        Importez un modèle UI depuis un fichier JSON d'exportation
                    </div>
                </div>
                
                <div class="card-body">
                    <!-- Instructions -->
                    <div class="alert alert-info d-flex align-items-start">
                        <i class="fas fa-info-circle me-2 mt-1"></i>
                        <div>
                            <h6 class="alert-heading mb-2">Instructions d'importation</h6>
                            <ul class="mb-0 small">
                                <li>Sélectionnez un fichier JSON exporté depuis un modèle UI existant</li>
                                <li>Le fichier doit contenir la configuration complète du modèle (structure, composants, styles)</li>
                                <li>Vous pouvez optionnellement associer le modèle importé à un type de document spécifique</li>
                                <li>Les conflits de noms seront automatiquement résolus en ajoutant un suffixe</li>
                            </ul>
                        </div>
                    </div>

                    <form method="post" enctype="multipart/form-data" class="needs-validation" novalidate>
                        <div class="row">
                            <div class="col-md-8">
                                <!-- File Upload -->
                                <div class="mb-4">
                                    <label for="template_file" class="form-label">
                                        <i class="fas fa-file-upload me-1"></i>
                                        Fichier de modèle UI (JSON)
                                    </label>
                                    <input type="file" 
                                           class="form-control" 
                                           id="template_file" 
                                           name="template_file"
                                           accept=".json,application/json"
                                           required>
                                    <div class="form-text">
                                        Formats acceptés : .json (fichier d'exportation de modèle UI)
                                    </div>
                                    <div class="invalid-feedback">
                                        Veuillez sélectionner un fichier JSON valide.
                                    </div>
                                </div>

                                <!-- Document Type Assignment -->
                                <div class="mb-4">
                                    <label for="document_type_id" class="form-label">
                                        <i class="fas fa-tag me-1"></i>
                                        Type de document (optionnel)
                                    </label>
                                    <select class="form-select" id="document_type_id" name="document_type_id">
                                        <option value="">Garder le type d'origine ou Global</option>
                                        {% for document_type in document_types|default([]) %}
                                            <option value="{{ document_type.id }}">{{ document_type.name }}</option>
                                        {% endfor %}
                                    </select>
                                    <div class="form-text">
                                        Si aucun type n'est sélectionné, le modèle gardera son type d'origine ou sera défini comme global
                                    </div>
                                </div>

                                <!-- Import Options -->
                                <div class="card bg-light border-0 mb-4">
                                    <div class="card-header bg-transparent border-0 pb-0">
                                        <h6 class="card-title mb-0">
                                            <i class="fas fa-cog me-1"></i>
                                            Options d'importation
                                        </h6>
                                    </div>
                                    <div class="card-body pt-2">
                                        <div class="form-check mb-2">
                                            <input class="form-check-input" type="checkbox" id="import_components" name="import_components" checked>
                                            <label class="form-check-label" for="import_components">
                                                Importer les composants UI
                                            </label>
                                            <div class="form-text small">
                                                Inclure tous les composants (texte, images, etc.) du modèle
                                            </div>
                                        </div>
                                        
                                        <div class="form-check mb-2">
                                            <input class="form-check-input" type="checkbox" id="import_styles" name="import_styles" checked>
                                            <label class="form-check-label" for="import_styles">
                                                Importer les styles CSS
                                            </label>
                                            <div class="form-text small">
                                                Inclure tous les styles CSS personnalisés du modèle
                                            </div>
                                        </div>
                                        
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="set_as_default" name="set_as_default">
                                            <label class="form-check-label" for="set_as_default">
                                                Définir comme modèle par défaut
                                            </label>
                                            <div class="form-text small">
                                                Ce modèle sera utilisé automatiquement pour le type de document sélectionné
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-4">
                                <!-- File Preview -->
                                <div class="card bg-light border-0 mb-3" id="file-preview" style="display: none;">
                                    <div class="card-header bg-transparent border-0 pb-2">
                                        <h6 class="card-title mb-0">
                                            <i class="fas fa-eye me-1"></i>
                                            Aperçu du fichier
                                        </h6>
                                    </div>
                                    <div class="card-body pt-0">
                                        <div id="file-info"></div>
                                    </div>
                                </div>

                                <!-- Supported Formats -->
                                <div class="card bg-light border-0">
                                    <div class="card-header bg-transparent border-0 pb-2">
                                        <h6 class="card-title mb-0">
                                            <i class="fas fa-question-circle me-1"></i>
                                            Formats supportés
                                        </h6>
                                    </div>
                                    <div class="card-body pt-0">
                                        <div class="small">
                                            <div class="d-flex align-items-center mb-2">
                                                <i class="fas fa-file-code text-primary me-2"></i>
                                                <div>
                                                    <strong>JSON</strong><br>
                                                    <span class="text-muted">Fichier d'exportation de modèle UI</span>
                                                </div>
                                            </div>
                                            
                                            <hr class="my-2">
                                            
                                            <div class="text-muted small">
                                                <strong>Structure attendue :</strong>
                                                <ul class="list-unstyled ms-2 mt-1">
                                                    <li>• Configuration du modèle</li>
                                                    <li>• Définition des composants</li>
                                                    <li>• Styles CSS personnalisés</li>
                                                    <li>• Paramètres de page</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Actions -->
                        <div class="d-flex justify-content-between">
                            <a href="{{ path('admin_document_ui_template_index') }}" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left me-1"></i>
                                Retour à la liste
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-upload me-1"></i>
                                Importer le modèle
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Upload Progress Modal -->
<div class="modal fade" id="uploadModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body text-center p-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Importation en cours...</span>
                </div>
                <div class="h6 mb-0">Importation en cours...</div>
                <div class="text-muted small">Veuillez patienter</div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const fileInput = document.getElementById('template_file');
            const filePreview = document.getElementById('file-preview');
            const fileInfo = document.getElementById('file-info');
            const form = document.querySelector('.needs-validation');
            const uploadModal = new bootstrap.Modal(document.getElementById('uploadModal'));

            // File input change handler
            fileInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                
                if (file) {
                    // Show file preview
                    filePreview.style.display = 'block';
                    
                    // Display file information
                    const fileSize = (file.size / 1024).toFixed(1) + ' KB';
                    const lastModified = new Date(file.lastModified).toLocaleDateString('fr-FR');
                    
                    fileInfo.innerHTML = `
                        <div class="small">
                            <div class="d-flex justify-content-between mb-1">
                                <span class="text-muted">Nom :</span>
                                <span class="fw-bold">${file.name}</span>
                            </div>
                            <div class="d-flex justify-content-between mb-1">
                                <span class="text-muted">Taille :</span>
                                <span>${fileSize}</span>
                            </div>
                            <div class="d-flex justify-content-between mb-1">
                                <span class="text-muted">Type :</span>
                                <span>${file.type || 'application/json'}</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span class="text-muted">Modifié :</span>
                                <span>${lastModified}</span>
                            </div>
                        </div>
                    `;

                    // Validate JSON file (basic check)
                    if (file.type !== 'application/json' && !file.name.endsWith('.json')) {
                        fileInput.setCustomValidity('Le fichier doit être au format JSON');
                        fileInput.classList.add('is-invalid');
                    } else {
                        fileInput.setCustomValidity('');
                        fileInput.classList.remove('is-invalid');
                        
                        // Try to preview JSON content (first few lines)
                        const reader = new FileReader();
                        reader.onload = function(event) {
                            try {
                                const jsonContent = JSON.parse(event.target.result);
                                
                                // Check if it looks like a UI template export
                                if (jsonContent.name && jsonContent.type === 'ui_template') {
                                    fileInfo.innerHTML += `
                                        <hr class="my-2">
                                        <div class="small">
                                            <div class="text-success mb-1">
                                                <i class="fas fa-check-circle me-1"></i>
                                                Fichier de modèle UI valide
                                            </div>
                                            <div class="text-muted">
                                                <strong>Modèle :</strong> ${jsonContent.name || 'Sans nom'}<br>
                                                <strong>Composants :</strong> ${jsonContent.components ? jsonContent.components.length : 0}
                                            </div>
                                        </div>
                                    `;
                                } else {
                                    fileInfo.innerHTML += `
                                        <hr class="my-2">
                                        <div class="small text-warning">
                                            <i class="fas fa-exclamation-triangle me-1"></i>
                                            Structure de fichier non reconnue
                                        </div>
                                    `;
                                }
                            } catch (error) {
                                fileInfo.innerHTML += `
                                    <hr class="my-2">
                                    <div class="small text-danger">
                                        <i class="fas fa-times-circle me-1"></i>
                                        JSON invalide
                                    </div>
                                `;
                                fileInput.setCustomValidity('Le fichier JSON n\'est pas valide');
                                fileInput.classList.add('is-invalid');
                            }
                        };
                        reader.readAsText(file.slice(0, 1024)); // Read first 1KB for preview
                    }
                } else {
                    filePreview.style.display = 'none';
                }
            });

            // Form submission handler
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (!form.checkValidity()) {
                    e.stopPropagation();
                    form.classList.add('was-validated');
                    return;
                }

                // Show upload progress modal
                uploadModal.show();

                // Create FormData and submit
                const formData = new FormData(form);
                
                fetch(form.action || window.location.href, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => {
                    uploadModal.hide();
                    
                    if (response.ok) {
                        // Redirect on success (assuming the server returns a redirect)
                        window.location.href = response.url || '{{ path('admin_document_ui_template_index') }}';
                    } else {
                        throw new Error('Erreur lors de l\'importation');
                    }
                })
                .catch(error => {
                    uploadModal.hide();
                    console.error('Erreur:', error);
                    
                    // Show error message
                    const alert = document.createElement('div');
                    alert.className = 'alert alert-danger alert-dismissible fade show';
                    alert.innerHTML = `
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Erreur lors de l'importation du modèle. Veuillez vérifier le fichier et réessayer.
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    form.insertBefore(alert, form.firstChild);
                });
            });

            // Drag & drop support
            const dropZone = document.querySelector('.card-body');
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight(e) {
                dropZone.classList.add('border-primary', 'bg-light');
            }
            
            function unhighlight(e) {
                dropZone.classList.remove('border-primary', 'bg-light');
            }
            
            dropZone.addEventListener('drop', handleDrop, false);
            
            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                
                if (files.length > 0) {
                    fileInput.files = files;
                    fileInput.dispatchEvent(new Event('change'));
                }
            }
        });
    </script>
{% endblock %}
